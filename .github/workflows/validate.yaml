name: Validate, Build, and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: dropdown-list-badge-test:latest
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Verify dist folder in image
        run: docker run --rm dropdown-list-badge-test:latest ls -l dist

      - name: Start server
        run: |
          docker run --name dropdown-list-badge-server -d -p 5000:5000 dropdown-list-badge-test:latest npx serve -l 5000 .
          sleep 5

      - name: Run Playwright tests
        run: |
          docker run --rm --network host \
            -v ${{ github.workspace }}/tests:/app/tests \
            -v ${{ github.workspace }}/tests/__snapshots__:/app/tests/__snapshots__ \
            -v ${{ github.workspace }}/tests/test-results:/app/tests/test-results \
            -v ${{ github.workspace }}/tests/html-report:/app/tests/html-report \
            dropdown-list-badge-test:latest npx playwright test --config=tests/playwright.config.ts

      - name: Upload Playwright HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: tests/html-report

      - name: Stop server
        run: docker rm -f dropdown-list-badge-server || true

      - name: Copy dist from Docker image
        run: |
          id=$(docker create dropdown-list-badge-test:latest)
          docker cp $id:/app/dist ./dist-artifact
          docker cp $id:/app/version.json ./dist-artifact/version.json
          docker rm $id

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifact
          path: dist-artifact

  commit_dist:
    runs-on: ubuntu-latest
    needs: [build_and_test, codeql-analysis]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-artifact
          path: dist-artifact

      - name: Copy dist artifact into repo
        run: |
          rm -rf dist
          mv dist-artifact dist
          # Move version.json to dist/version-published.json
          if [ -f dist/version.json ]; then
            mv dist/version.json dist/version-published.json
          fi

      - name: Allow dist for CI
        run: echo "!dist/" >> .gitignore

      - name: Show git status for debug 1
        run: git status

      - name: Create Pull Request for dist update
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}        
          commit-message: "chore: Build and commit dist folder for HACS"
          branch: update-dist-artifact
          title: "Update dist folder from CI"
          body: "Automated update of dist folder after successful build and test."
          base: main
          add-paths: dist/
          author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>

  codeql-analysis:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: javascript-typescript
          build-mode: none
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}

    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
